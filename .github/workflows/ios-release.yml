name: Build and Distribute

on:
  push:
    branches:
      - master

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 

          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/lapupu.ipa"
          APPLE_ID: "wuhongchuan@tydemedia.shop"
          APP_SPECIFIC_PASSWORD: "tuxr-cywy-koeh-vach"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
